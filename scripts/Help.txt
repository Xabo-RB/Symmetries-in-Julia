Exactamente, en el contexto del código original que proporcionaste, las dos líneas son necesarias y no redundantes. La primera línea evalúa una cadena que contiene una expresión para crear una variable simbólica, y la segunda línea recupera la instancia de esa variable simbólica recién creada para su uso posterior.

Aquí te muestro el fragmento de código original nuevamente con una explicación paso a paso:

@variables t: define t como una variable simbólica global.
states = ["x1", "x2", "x3", "x4"]: crea una lista de nombres de estado que se utilizarán para generar variables simbólicas.
st = Num[]: inicializa un arreglo vacío de tipo Num para almacenar las variables simbólicas que se crean en el bucle.
Dentro del bucle for q in states:
Se construye una cadena con la declaración de la variable simbólica correspondiente a cada nombre de estado en states utilizando metaprogramación.
eval(Meta.parse(str)): evalúa la cadena para crear la variable simbólica. En este punto, la variable simbólica con el nombre en q se ha creado y está disponible para su uso.
var = eval(Meta.parse("$(q)(t)")): recupera la variable simbólica que acabamos de definir para que pueda ser manipulada en el código de Julia como un objeto de tipo Num. Aunque la creación y la recuperación podrían fusionarse en una operación, la separación en dos pasos permite una mayor claridad y control, especialmente en metaprogramación, donde las etapas de parseo y evaluación son críticas.
push!(st, var): agrega la variable simbólica al arreglo st.
La confusión podría surgir porque normalmente se espera que después de definir una variable simbólica con una macro, se pueda usar directamente. Sin embargo, debido a la manera en que se usa eval para interpretar las cadenas, necesitas recuperar la variable en un paso separado para poder usarla efectivamente.

Por lo tanto, para tu requerimiento original de crear variables en mayúsculas, seguirías un proceso similar, asegurándote de que después de usar eval para crear la variable simbólica en mayúsculas, recuperas esa instancia para su uso posterior. El código que proporcioné anteriormente sigue siendo relevante y válido para este propósito.

El error que estás experimentando se debe a un intento de convertir un objeto de tipo String a un objeto de tipo Symbol de una manera que Julia no espera. En este caso, parece estar relacionado con cómo se están creando las variables simbólicas en el bucle for. Vamos a ajustar este código para resolver este problema.

En lugar de usar strings para los nombres de variables en @variables, deberíamos usar directamente Symbol. Aquí está la corrección:

using Symbolics

@variables t
states = ["x1", "x2", "x3", "x4"]

ST = Num[]
for q in states
    Mayus = uppercase(q)
    var_symbol = Symbol(Mayus, "(t, ", q, ")")  # Crear un símbolo para la variable
    @eval begin
        @variables $var_symbol
        push!(ST, $var_symbol)
    end
end

# Evaluar las ecuaciones
ecuaciones_simbolicas = [eval(Meta.parse(eq)) for eq in ecuaciones]

En este código:

Se utiliza Symbol(Mayus, "(t, ", q, ")") para crear un símbolo que representa la variable simbólica, por ejemplo, Symbol("X1(t, x1)").
El uso de @eval y @variables luego crea y almacena la variable simbólica basada en este símbolo.
push!(ST, $var_symbol) agrega la variable simbólica al vector ST.
Este ajuste debería resolver el problema de conversión de tipo que estás experimentando. Además, asegúrate de que las ecuaciones en ecuaciones estén correctamente formateadas y que todas las variables y funciones necesarias estén definidas para ser interpretadas correctamente por Symbolics.jl.

